#!/bin/bash
# Copyright 2024 Martin Burri
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

set -e
shopt -s nullglob  # no error when glob has no match
shopt -s globstar  # recursive by default
echo "pwf-import: ENTRY"

print_help () {
	cat <<'EOF'
USAGE:
    pwf-import [OPTION...] PATH

OPTIONS

    -h     show this help

    All checks are enabled by default, but can be disabled individually:
    -i IL  see documentation of pwf-check

    -k     keep-unprotected, do not lock the destination year folder
    -y     year (if it cannot be auto-detected by PATH name)
    -n     nono, dry-run, only print actions, do nothing

INFO
    Import (i.e. move a new folder structure to the 1_original/ storage. The 
    folder structure must contain files sorted to raw/, jpg/, video/ and audio/
    otherwise the script will exit with an error.

EOF

    _pwf_print_fzf_info
}

IGNORE_LIST=
DRY_RUN=false
YEAR=
KEEP_UNPROTECTED=false

while getopts 'hi:ny:k' OPTION; do
    case "$OPTION" in
        h) print_help; exit 0 ;;
        i) IGNORE_LIST="$OPTARG" ;;
        n) DRY_RUN=true ;;
        y) YEAR="$OPTARG" ;;
        k) KEEP_UNPROTECTED=true ;;
        *) print_help; exit 1 ;;
    esac
done

# make up $DIR variable:
DIR=${@:$OPTIND:1}
[[ ! "$DIR" || "$DIR" == "." ]] && DIR="$(pwd)"  # use current dir if none given
[[ "$DIR" == /* ]] || DIR="$(pwd)/$DIR"  # ensure DIR is absolute path
[[ -e "$DIR" ]] || _pwf_err_exit "\"$DIR\" does not exist!"

# perform checks first
folder=$(basename "$DIR")
pwf-check -i "$IGNORE_LIST,prot,cs,miss" "$DIR" || exit 1

if [[ ! $YEAR ]]; then
    [[ ! "$folder" =~ ^[0-9]{4}[-_] ]] && \
        _pwf_err_exit "Year cannot be auto-detected from PATH!"
    YEAR=${folder:0:4}
else
    [[ "$YEAR" =~ ^[0-9]{4}$ ]] || _pwf_err_exit "Illegal year format!"
fi

TARGET_DIR="$PWF_HOME/1_original/$YEAR/"

echo "Ensure that target directory exists..."
[[ "$DRY_RUN" == false ]] && mkdir -p "$TARGET_DIR"

echo "Un-protecting target directory..."
[[ "$DRY_RUN" == false ]] && pwf-protect -u -y "$YEAR"

echo "Moving $DIR to $TARGET_DIR ..."
[[ "$DRY_RUN" == false ]] && mv "$DIR" "$TARGET_DIR"

echo "Protecting target directory..."
[[ "$DRY_RUN" == false && $KEEP_UNPROTECTED == false ]] && pwf-protect -f -y "$YEAR"

[[ "$DRY_RUN" == true ]] && echo "NOTHING DONE, DRY-RUN!" && exit 0

echo "pwf-import: OK"
