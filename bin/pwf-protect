#!/bin/bash
# Copyright 2024 Martin Burri
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

shopt -s nullglob  # no error when glob has no match
shopt -s globstar  # recursive by default
set -e
echo "pwf-protect: ENTRY"

function print_help {
	cat <<'EOF'
USAGE
    pwf-protect [OPTION...] -y YEAR
    pwf-protect [OPTION...] [PATH]

OPTIONS
    -h     show this help

    -a     unprotect all content of a directory (also files)
    -f     forced (don't perform any checks)
    -i IL  see documentation of pwf-check
    -u     unprotect
    -y     specify the path as 1_original/YEAR/ - which is the normal use case

INFO
    Protects or unprotects a file or folder provided by PATH. Normally only used
    against 1_original/YEAR folders (set by -y), but can be used for any PATH.
    Calls pwf-check before protection is applied (unless -f is set).

    By default, only folders are unprotected, but files remain protected. This
    allows to add or delete files, but modification is still not allowed. With
    the flag -a all files can be unlocked too (use with care!).

EOF

    _pwf_print_fzf_info
}

IGNORE_LIST=""
OPERATION=protect
FORCED=false
YEAR=
UNPROTECT_ALL=false

while getopts 'hai:ufy:' OPTION; do
    case "$OPTION" in
        h) print_help; exit 0 ;;
        a) UNPROTECT_ALL=true ;;
        i) IGNORE_LIST="$OPTARG" ;;
        u) OPERATION=unprotect ;;
        f) FORCED=true ;;
        y) YEAR="$OPTARG" ;;
        *) print_help; exit 1 ;;
    esac
done

# make up $DIR variable:
DIR=${@:$OPTIND:1}
[[ $YEAR ]] && DIR="$PWF_HOME/1_original/$YEAR"
[[ ! "$DIR" ]] && DIR="."
[[ -e "$DIR" ]] || _pwf_err_exit "\"$DIR\" does not exist!"

# perform checks first
if [[ "$OPERATION" == "protect" ]] && [[ "$FORCED" == "false" ]]; then
    pwf-check -i "$IGNORE_LIST,prot" "$DIR" || exit 1
fi

protect_folder ()
{
    local parent=$(dirname "$DIR")
    local dirname=$(basename "$DIR")

    cd "$parent"

    local md5_file="$dirname.md5"

    echo "Calculating checksums of new files..."
    touch "$md5_file"
    for f in "$dirname"/**/*; do
        [[ -f "$f" ]] || continue

        grep -q "$f" "$md5_file" && continue
        echo "$f"
        md5sum -b "$f" >> "$md5_file"
    done

    echo "Setting write locks..."
    chmod -R a-w "$dirname"
    chmod a-w "$md5_file"

    cd - > /dev/null
    return 0
}

unprotect_folder ()
{
    local parent=$(dirname "$DIR")
    local dirname=$(basename "$DIR")

    cd "$parent"

    md5_file="$dirname.md5"
    [[ -e "$md5_file" ]] && chmod u+w,g+w "$md5_file"

    if [[ "$UNPROTECT_ALL" == true ]]; then
        chmod -R u+w,g+w "$DIR"
    else
        find "$DIR" -type d -exec chmod u+w,g+w {} +
    fi

    cd - > /dev/null
    return 0
}

if [[ "$OPERATION" == "protect" ]]; then
    if [[ -d "$DIR" ]]; then
        echo "Protect folder $DIR ..."
        protect_folder
    else
        echo "Protect file $DIR ..."
        chmod a-w "$DIR"
    fi
else
    if [[ -d "$DIR" ]]; then
        echo "Unprotect folder $DIR ..."
        unprotect_folder
    else
        echo "Unprotect file $DIR ..."
        chmod u+w,g+w "$DIR"
    fi
fi

echo "pwf-protect: OK"
