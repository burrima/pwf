#!/bin/bash
# Copyright 2024 Martin Burri
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

set -e
shopt -s nullglob  # no error when glob has no match
shopt -s globstar  # recursive by default
echo "pwf-rename-by-date: ENTRY"

function print_help {
	cat <<'EOF'
USAGE
    pwf-rename-by-date [OPTION...] [PATH]

OPTIONS
    -h     show this help
    -u     undo - remove the date from the name again
    -c SH  use given shell script to retrieve the date string
    -b     bare - do not try to auto-find get_date.sh

INFO
    Renames the image files in the given folder (or just the image itself if
    PATH is a file) by prefixing them with a date string. The purpose is to 
    make the folder view sort the files properly.

    The option -c can be used to provide a shell script which takes the name of
    the picture and prints the date string. This is useful to apply a correction
    to the date/time (remember: original files are protected and must not be
    changed).

    By default, the script traverses the directory tree upwards to find the
    script get_date.sh automatically. This can be suppressed by the -b option.
    
EOF

    _pwf_print_fzf_info
}

UNDO=false
CORR_SCRIPT=
AUTO_FIND=true

while getopts 'huc:b' OPTION; do
    case "$OPTION" in
        h) print_help; exit 0 ;;
        b) AUTO_FIND=false ;;
        c) CORR_SCRIPT="$OPTARG" ;;
        u) UNDO=true ;;
        *) print_help; exit 1 ;;
    esac
done

# make up $DIR variable:
DIR=${@:$OPTIND:1}
[[ ! "$DIR" ]] && DIR=$(pwd)
[[ -e "$DIR" ]] || _pwf_err_exit "\"$DIR\" does not exist!"

# auto-find correction script:
if [[ "$UNDO" == false && "$AUTO_FIND" == true ]]; then
    echo "Trying to auto-find \"get_date.sh\""...
    search_dir="$DIR"
    while true; do
        if [[ -e "$search_dir/get_date.sh" ]]; then 
            CORR_SCRIPT="$search_dir/get_date.sh"
            echo "Found: $CORR_SCRIPT"
            break
        fi
        search_dir=$(dirname "$search_dir")  # traverse 1 up
        [[ "${search_dir%/}" == "${PWF_HOME%/}" ]] && break
    done
fi

# perform checks:
if [[ "$UNDO" == false && "$CORR_SCRIPT" ]]; then
    echo "Using correction script: $CORR_SCRIPT"
    [[ -e "$CORR_SCRIPT" ]] || \
        _pwf_err_exit "correction script \"$CORR_SCRIPT\" not found!"
else
    echo "Using no correction script"
fi
pwf-check -o name "$DIR" > /dev/null || exit 1

if [[ -d "$DIR" ]]; then
    # NOTE: * will be resolved when $filename is accessed without " "
    filename=*
    foldername=$(cd "$DIR" && pwd)  # absolute path
else
    filename=$(basename "$DIR")
    foldername=$(dirname "$DIR")
    foldername=$(cd "$foldername" && pwd)  # absolute path
fi

if [[ "$UNDO" == false ]]; then
    echo "Add date prefix to files..."

    for f in $foldername/$filename; do
        filename=$(basename "$f")  # now concrete file
        [[ "$filename" =~ ^[0-9]{8}-[0-9]{6}- ]] && continue
        echo "$f"
        if [[ "$CORR_SCRIPT" ]]; then
            prefix=$($CORR_SCRIPT "$f")
        else
            date=$(exiv2 -Pv -g Exif.Photo.DateTimeOriginal "$f")
            read Y M D h m s <<< ${date//:/ }
            prefix="$Y$M$D-$h$m$s"
        fi
        mv "$f" "$foldername/$prefix-$filename"
    done
else  # UNDO
    echo "Remove date prefix from files..."
    for f in $foldername/$filename; do
        filename=$(basename "$f")  # now concrete file
        [[ "$filename" =~ ^[0-9]{8}-[0-9]{6}- ]] || continue
        echo "$f"
        mv "$f" "$foldername/${filename#????????-??????-}"
    done
fi

echo "pwf-rename-by-date: OK"
